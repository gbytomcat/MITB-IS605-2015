{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/conda/envs/python2/lib/python2.7/site-packages/pandas/io/parsers.py:1170: DtypeWarning: Columns (8,9,10,11,12,43,157,196,214,225,228,229,231,235,238) have mixed types. Specify dtype option on import or set low_memory=False.\n",
      "  data = self._reader.read(nrows)\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>ID</th>\n",
       "      <th>VAR_0002</th>\n",
       "      <th>VAR_0003</th>\n",
       "      <th>VAR_0004</th>\n",
       "      <th>VAR_0006</th>\n",
       "      <th>VAR_0007</th>\n",
       "      <th>VAR_0013</th>\n",
       "      <th>VAR_0014</th>\n",
       "      <th>VAR_0015</th>\n",
       "      <th>VAR_0016</th>\n",
       "      <th>...</th>\n",
       "      <th>VAR_1925</th>\n",
       "      <th>VAR_1926</th>\n",
       "      <th>VAR_1927</th>\n",
       "      <th>VAR_1928</th>\n",
       "      <th>VAR_1929</th>\n",
       "      <th>VAR_1930</th>\n",
       "      <th>VAR_1931</th>\n",
       "      <th>VAR_1932</th>\n",
       "      <th>VAR_1933</th>\n",
       "      <th>target</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>145231.000000</td>\n",
       "      <td>145231.000000</td>\n",
       "      <td>145231.000000</td>\n",
       "      <td>145231.000000</td>\n",
       "      <td>145175.000000</td>\n",
       "      <td>145175.00000</td>\n",
       "      <td>145175.000000</td>\n",
       "      <td>145175.000000</td>\n",
       "      <td>145175.000000</td>\n",
       "      <td>145175.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>145231.000000</td>\n",
       "      <td>145231.000000</td>\n",
       "      <td>145231.000000</td>\n",
       "      <td>145231.000000</td>\n",
       "      <td>1.452310e+05</td>\n",
       "      <td>145231.000000</td>\n",
       "      <td>145231.000000</td>\n",
       "      <td>145231.000000</td>\n",
       "      <td>145231.000000</td>\n",
       "      <td>145231.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>145124.981808</td>\n",
       "      <td>105.278040</td>\n",
       "      <td>88.492285</td>\n",
       "      <td>3721.946210</td>\n",
       "      <td>0.693907</td>\n",
       "      <td>0.51316</td>\n",
       "      <td>0.693907</td>\n",
       "      <td>0.494493</td>\n",
       "      <td>0.476763</td>\n",
       "      <td>1.447598</td>\n",
       "      <td>...</td>\n",
       "      <td>0.549965</td>\n",
       "      <td>86.664369</td>\n",
       "      <td>89.828762</td>\n",
       "      <td>914.417259</td>\n",
       "      <td>9.904497e+08</td>\n",
       "      <td>922.938505</td>\n",
       "      <td>936.487905</td>\n",
       "      <td>9942.162279</td>\n",
       "      <td>8849.839111</td>\n",
       "      <td>0.232547</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>83890.290627</td>\n",
       "      <td>143.351237</td>\n",
       "      <td>125.903323</td>\n",
       "      <td>12280.012213</td>\n",
       "      <td>1.604578</td>\n",
       "      <td>1.17531</td>\n",
       "      <td>1.604578</td>\n",
       "      <td>1.115085</td>\n",
       "      <td>1.000755</td>\n",
       "      <td>1.132784</td>\n",
       "      <td>...</td>\n",
       "      <td>6.361312</td>\n",
       "      <td>31.347700</td>\n",
       "      <td>26.928221</td>\n",
       "      <td>276.361514</td>\n",
       "      <td>9.725818e+07</td>\n",
       "      <td>212.087416</td>\n",
       "      <td>210.370833</td>\n",
       "      <td>743.153332</td>\n",
       "      <td>3175.797333</td>\n",
       "      <td>0.422457</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>2.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.00000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>72342.500000</td>\n",
       "      <td>24.000000</td>\n",
       "      <td>13.000000</td>\n",
       "      <td>1790.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.00000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>98.000000</td>\n",
       "      <td>98.000000</td>\n",
       "      <td>998.000000</td>\n",
       "      <td>1.000000e+09</td>\n",
       "      <td>998.000000</td>\n",
       "      <td>998.000000</td>\n",
       "      <td>9998.000000</td>\n",
       "      <td>9998.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>145272.000000</td>\n",
       "      <td>60.000000</td>\n",
       "      <td>55.000000</td>\n",
       "      <td>2500.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.00000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>98.000000</td>\n",
       "      <td>98.000000</td>\n",
       "      <td>998.000000</td>\n",
       "      <td>1.000000e+09</td>\n",
       "      <td>998.000000</td>\n",
       "      <td>998.000000</td>\n",
       "      <td>9998.000000</td>\n",
       "      <td>9998.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>217686.500000</td>\n",
       "      <td>132.000000</td>\n",
       "      <td>120.000000</td>\n",
       "      <td>3600.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.00000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>98.000000</td>\n",
       "      <td>98.000000</td>\n",
       "      <td>998.000000</td>\n",
       "      <td>1.000000e+09</td>\n",
       "      <td>998.000000</td>\n",
       "      <td>998.000000</td>\n",
       "      <td>9998.000000</td>\n",
       "      <td>9998.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>290463.000000</td>\n",
       "      <td>999.000000</td>\n",
       "      <td>999.000000</td>\n",
       "      <td>2200000.000000</td>\n",
       "      <td>68.000000</td>\n",
       "      <td>66.00000</td>\n",
       "      <td>68.000000</td>\n",
       "      <td>67.000000</td>\n",
       "      <td>35.000000</td>\n",
       "      <td>39.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>99.000000</td>\n",
       "      <td>99.000000</td>\n",
       "      <td>99.000000</td>\n",
       "      <td>999.000000</td>\n",
       "      <td>1.000000e+09</td>\n",
       "      <td>999.000000</td>\n",
       "      <td>999.000000</td>\n",
       "      <td>9999.000000</td>\n",
       "      <td>9999.000000</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>8 rows Ã— 1883 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                  ID       VAR_0002       VAR_0003        VAR_0004  \\\n",
       "count  145231.000000  145231.000000  145231.000000   145231.000000   \n",
       "mean   145124.981808     105.278040      88.492285     3721.946210   \n",
       "std     83890.290627     143.351237     125.903323    12280.012213   \n",
       "min         2.000000       0.000000       0.000000        0.000000   \n",
       "25%     72342.500000      24.000000      13.000000     1790.000000   \n",
       "50%    145272.000000      60.000000      55.000000     2500.000000   \n",
       "75%    217686.500000     132.000000     120.000000     3600.000000   \n",
       "max    290463.000000     999.000000     999.000000  2200000.000000   \n",
       "\n",
       "            VAR_0006      VAR_0007       VAR_0013       VAR_0014  \\\n",
       "count  145175.000000  145175.00000  145175.000000  145175.000000   \n",
       "mean        0.693907       0.51316       0.693907       0.494493   \n",
       "std         1.604578       1.17531       1.604578       1.115085   \n",
       "min         0.000000       0.00000       0.000000       0.000000   \n",
       "25%         0.000000       0.00000       0.000000       0.000000   \n",
       "50%         0.000000       0.00000       0.000000       0.000000   \n",
       "75%         1.000000       1.00000       1.000000       1.000000   \n",
       "max        68.000000      66.00000      68.000000      67.000000   \n",
       "\n",
       "            VAR_0015       VAR_0016      ...             VAR_1925  \\\n",
       "count  145175.000000  145175.000000      ...        145231.000000   \n",
       "mean        0.476763       1.447598      ...             0.549965   \n",
       "std         1.000755       1.132784      ...             6.361312   \n",
       "min         0.000000       0.000000      ...             0.000000   \n",
       "25%         0.000000       1.000000      ...             0.000000   \n",
       "50%         0.000000       1.000000      ...             0.000000   \n",
       "75%         1.000000       1.000000      ...             0.000000   \n",
       "max        35.000000      39.000000      ...            99.000000   \n",
       "\n",
       "            VAR_1926       VAR_1927       VAR_1928      VAR_1929  \\\n",
       "count  145231.000000  145231.000000  145231.000000  1.452310e+05   \n",
       "mean       86.664369      89.828762     914.417259  9.904497e+08   \n",
       "std        31.347700      26.928221     276.361514  9.725818e+07   \n",
       "min         0.000000       0.000000       0.000000  0.000000e+00   \n",
       "25%        98.000000      98.000000     998.000000  1.000000e+09   \n",
       "50%        98.000000      98.000000     998.000000  1.000000e+09   \n",
       "75%        98.000000      98.000000     998.000000  1.000000e+09   \n",
       "max        99.000000      99.000000     999.000000  1.000000e+09   \n",
       "\n",
       "            VAR_1930       VAR_1931       VAR_1932       VAR_1933  \\\n",
       "count  145231.000000  145231.000000  145231.000000  145231.000000   \n",
       "mean      922.938505     936.487905    9942.162279    8849.839111   \n",
       "std       212.087416     210.370833     743.153332    3175.797333   \n",
       "min         1.000000       0.000000       0.000000       0.000000   \n",
       "25%       998.000000     998.000000    9998.000000    9998.000000   \n",
       "50%       998.000000     998.000000    9998.000000    9998.000000   \n",
       "75%       998.000000     998.000000    9998.000000    9998.000000   \n",
       "max       999.000000     999.000000    9999.000000    9999.000000   \n",
       "\n",
       "              target  \n",
       "count  145231.000000  \n",
       "mean        0.232547  \n",
       "std         0.422457  \n",
       "min         0.000000  \n",
       "25%         0.000000  \n",
       "50%         0.000000  \n",
       "75%         0.000000  \n",
       "max         1.000000  \n",
       "\n",
       "[8 rows x 1883 columns]"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "import time\n",
    "\n",
    "def rstr(df): return df.apply(lambda x: [x.unique()])\n",
    "\n",
    "url = 'https://s3.eu-central-1.amazonaws.com/smutomcat/new+folder/train.csv'\n",
    "train1 = pd.read_csv(url)\n",
    "train1.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>ID</th>\n",
       "      <th>VAR_0001</th>\n",
       "      <th>VAR_0002</th>\n",
       "      <th>VAR_0003</th>\n",
       "      <th>VAR_0004</th>\n",
       "      <th>VAR_0005</th>\n",
       "      <th>VAR_0006</th>\n",
       "      <th>VAR_0007</th>\n",
       "      <th>VAR_0008</th>\n",
       "      <th>VAR_0009</th>\n",
       "      <th>...</th>\n",
       "      <th>VAR_1926</th>\n",
       "      <th>VAR_1927</th>\n",
       "      <th>VAR_1928</th>\n",
       "      <th>VAR_1929</th>\n",
       "      <th>VAR_1930</th>\n",
       "      <th>VAR_1931</th>\n",
       "      <th>VAR_1932</th>\n",
       "      <th>VAR_1933</th>\n",
       "      <th>VAR_1934</th>\n",
       "      <th>target</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2</td>\n",
       "      <td>H</td>\n",
       "      <td>224</td>\n",
       "      <td>0</td>\n",
       "      <td>4300</td>\n",
       "      <td>C</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>...</td>\n",
       "      <td>98</td>\n",
       "      <td>98</td>\n",
       "      <td>998</td>\n",
       "      <td>999999998</td>\n",
       "      <td>998</td>\n",
       "      <td>998</td>\n",
       "      <td>9998</td>\n",
       "      <td>9998</td>\n",
       "      <td>IAPS</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>4</td>\n",
       "      <td>H</td>\n",
       "      <td>7</td>\n",
       "      <td>53</td>\n",
       "      <td>4448</td>\n",
       "      <td>B</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>...</td>\n",
       "      <td>98</td>\n",
       "      <td>98</td>\n",
       "      <td>998</td>\n",
       "      <td>999999998</td>\n",
       "      <td>998</td>\n",
       "      <td>998</td>\n",
       "      <td>9998</td>\n",
       "      <td>9998</td>\n",
       "      <td>IAPS</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>5</td>\n",
       "      <td>H</td>\n",
       "      <td>116</td>\n",
       "      <td>3</td>\n",
       "      <td>3464</td>\n",
       "      <td>C</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>...</td>\n",
       "      <td>98</td>\n",
       "      <td>98</td>\n",
       "      <td>998</td>\n",
       "      <td>999999998</td>\n",
       "      <td>998</td>\n",
       "      <td>998</td>\n",
       "      <td>9998</td>\n",
       "      <td>9998</td>\n",
       "      <td>IAPS</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>7</td>\n",
       "      <td>H</td>\n",
       "      <td>240</td>\n",
       "      <td>300</td>\n",
       "      <td>3200</td>\n",
       "      <td>C</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>...</td>\n",
       "      <td>98</td>\n",
       "      <td>98</td>\n",
       "      <td>998</td>\n",
       "      <td>999999998</td>\n",
       "      <td>998</td>\n",
       "      <td>998</td>\n",
       "      <td>9998</td>\n",
       "      <td>9998</td>\n",
       "      <td>RCC</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>8</td>\n",
       "      <td>R</td>\n",
       "      <td>72</td>\n",
       "      <td>261</td>\n",
       "      <td>2000</td>\n",
       "      <td>N</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>...</td>\n",
       "      <td>98</td>\n",
       "      <td>98</td>\n",
       "      <td>998</td>\n",
       "      <td>999999998</td>\n",
       "      <td>998</td>\n",
       "      <td>998</td>\n",
       "      <td>9998</td>\n",
       "      <td>9998</td>\n",
       "      <td>BRANCH</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>14</td>\n",
       "      <td>R</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>4422</td>\n",
       "      <td>C</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>...</td>\n",
       "      <td>98</td>\n",
       "      <td>98</td>\n",
       "      <td>998</td>\n",
       "      <td>999999998</td>\n",
       "      <td>998</td>\n",
       "      <td>998</td>\n",
       "      <td>9998</td>\n",
       "      <td>9998</td>\n",
       "      <td>IAPS</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>16</td>\n",
       "      <td>H</td>\n",
       "      <td>60</td>\n",
       "      <td>132</td>\n",
       "      <td>40000</td>\n",
       "      <td>C</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>999999996</td>\n",
       "      <td>400</td>\n",
       "      <td>400</td>\n",
       "      <td>9996</td>\n",
       "      <td>76</td>\n",
       "      <td>IAPS</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>20</td>\n",
       "      <td>R</td>\n",
       "      <td>13</td>\n",
       "      <td>75</td>\n",
       "      <td>3600</td>\n",
       "      <td>B</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>...</td>\n",
       "      <td>98</td>\n",
       "      <td>98</td>\n",
       "      <td>998</td>\n",
       "      <td>999999998</td>\n",
       "      <td>998</td>\n",
       "      <td>998</td>\n",
       "      <td>9998</td>\n",
       "      <td>9998</td>\n",
       "      <td>IAPS</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>21</td>\n",
       "      <td>R</td>\n",
       "      <td>17</td>\n",
       "      <td>16</td>\n",
       "      <td>2296</td>\n",
       "      <td>N</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>97</td>\n",
       "      <td>997</td>\n",
       "      <td>999999997</td>\n",
       "      <td>400</td>\n",
       "      <td>997</td>\n",
       "      <td>9996</td>\n",
       "      <td>90</td>\n",
       "      <td>MOBILE</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>22</td>\n",
       "      <td>R</td>\n",
       "      <td>24</td>\n",
       "      <td>72</td>\n",
       "      <td>450</td>\n",
       "      <td>N</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>...</td>\n",
       "      <td>98</td>\n",
       "      <td>98</td>\n",
       "      <td>998</td>\n",
       "      <td>999999998</td>\n",
       "      <td>998</td>\n",
       "      <td>998</td>\n",
       "      <td>9998</td>\n",
       "      <td>9998</td>\n",
       "      <td>BRANCH</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>10 rows Ã— 1934 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   ID VAR_0001  VAR_0002  VAR_0003  VAR_0004 VAR_0005  VAR_0006  VAR_0007  \\\n",
       "0   2        H       224         0      4300        C         0         0   \n",
       "1   4        H         7        53      4448        B         1         0   \n",
       "2   5        H       116         3      3464        C         0         0   \n",
       "3   7        H       240       300      3200        C         0         0   \n",
       "4   8        R        72       261      2000        N         0         0   \n",
       "5  14        R         4         4      4422        C         0         0   \n",
       "6  16        H        60       132     40000        C         1         1   \n",
       "7  20        R        13        75      3600        B         0         0   \n",
       "8  21        R        17        16      2296        N         1         1   \n",
       "9  22        R        24        72       450        N         0         0   \n",
       "\n",
       "  VAR_0008 VAR_0009   ...   VAR_1926 VAR_1927 VAR_1928   VAR_1929  VAR_1930  \\\n",
       "0    False    False   ...         98       98      998  999999998       998   \n",
       "1    False    False   ...         98       98      998  999999998       998   \n",
       "2    False    False   ...         98       98      998  999999998       998   \n",
       "3    False    False   ...         98       98      998  999999998       998   \n",
       "4    False    False   ...         98       98      998  999999998       998   \n",
       "5    False    False   ...         98       98      998  999999998       998   \n",
       "6    False    False   ...          0        1        0  999999996       400   \n",
       "7    False    False   ...         98       98      998  999999998       998   \n",
       "8    False    False   ...          0       97      997  999999997       400   \n",
       "9    False    False   ...         98       98      998  999999998       998   \n",
       "\n",
       "   VAR_1931  VAR_1932  VAR_1933  VAR_1934  target  \n",
       "0       998      9998      9998      IAPS       0  \n",
       "1       998      9998      9998      IAPS       0  \n",
       "2       998      9998      9998      IAPS       0  \n",
       "3       998      9998      9998       RCC       0  \n",
       "4       998      9998      9998    BRANCH       1  \n",
       "5       998      9998      9998      IAPS       0  \n",
       "6       400      9996        76      IAPS       1  \n",
       "7       998      9998      9998      IAPS       0  \n",
       "8       997      9996        90    MOBILE       1  \n",
       "9       998      9998      9998    BRANCH       0  \n",
       "\n",
       "[10 rows x 1934 columns]"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train1.head(10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/conda/envs/python2/lib/python2.7/site-packages/pandas/io/parsers.py:1170: DtypeWarning: Columns (8,9,10,11,12,43,156,157,158,159,196,214,225,228,229,231,235,238) have mixed types. Specify dtype option on import or set low_memory=False.\n",
      "  data = self._reader.read(nrows)\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>ID</th>\n",
       "      <th>VAR_0002</th>\n",
       "      <th>VAR_0003</th>\n",
       "      <th>VAR_0004</th>\n",
       "      <th>VAR_0006</th>\n",
       "      <th>VAR_0007</th>\n",
       "      <th>VAR_0013</th>\n",
       "      <th>VAR_0014</th>\n",
       "      <th>VAR_0015</th>\n",
       "      <th>VAR_0016</th>\n",
       "      <th>...</th>\n",
       "      <th>VAR_1925</th>\n",
       "      <th>VAR_1926</th>\n",
       "      <th>VAR_1927</th>\n",
       "      <th>VAR_1928</th>\n",
       "      <th>VAR_1929</th>\n",
       "      <th>VAR_1930</th>\n",
       "      <th>VAR_1931</th>\n",
       "      <th>VAR_1932</th>\n",
       "      <th>VAR_1933</th>\n",
       "      <th>target</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>20000.000000</td>\n",
       "      <td>20000.000000</td>\n",
       "      <td>20000.000000</td>\n",
       "      <td>20000.000000</td>\n",
       "      <td>19994.000000</td>\n",
       "      <td>19994.000000</td>\n",
       "      <td>19994.000000</td>\n",
       "      <td>19994.000000</td>\n",
       "      <td>19994.000000</td>\n",
       "      <td>19994.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>20000.000000</td>\n",
       "      <td>20000.000000</td>\n",
       "      <td>20000.00000</td>\n",
       "      <td>20000.000000</td>\n",
       "      <td>2.000000e+04</td>\n",
       "      <td>20000.000000</td>\n",
       "      <td>20000.000000</td>\n",
       "      <td>20000.000000</td>\n",
       "      <td>20000.000000</td>\n",
       "      <td>20000.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>19816.086900</td>\n",
       "      <td>104.726850</td>\n",
       "      <td>88.940900</td>\n",
       "      <td>3632.640000</td>\n",
       "      <td>0.676003</td>\n",
       "      <td>0.503651</td>\n",
       "      <td>0.676003</td>\n",
       "      <td>0.486546</td>\n",
       "      <td>0.464689</td>\n",
       "      <td>1.439382</td>\n",
       "      <td>...</td>\n",
       "      <td>0.510700</td>\n",
       "      <td>86.700850</td>\n",
       "      <td>89.82830</td>\n",
       "      <td>914.417000</td>\n",
       "      <td>9.903500e+08</td>\n",
       "      <td>922.918600</td>\n",
       "      <td>936.496650</td>\n",
       "      <td>9944.365000</td>\n",
       "      <td>8853.884950</td>\n",
       "      <td>0.227350</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>11508.278148</td>\n",
       "      <td>141.417611</td>\n",
       "      <td>126.391923</td>\n",
       "      <td>10054.854967</td>\n",
       "      <td>1.548191</td>\n",
       "      <td>1.244530</td>\n",
       "      <td>1.548191</td>\n",
       "      <td>1.195092</td>\n",
       "      <td>0.972425</td>\n",
       "      <td>1.090811</td>\n",
       "      <td>...</td>\n",
       "      <td>6.057906</td>\n",
       "      <td>31.303839</td>\n",
       "      <td>26.93018</td>\n",
       "      <td>276.367084</td>\n",
       "      <td>9.776170e+07</td>\n",
       "      <td>212.687408</td>\n",
       "      <td>210.356248</td>\n",
       "      <td>728.373585</td>\n",
       "      <td>3170.914064</td>\n",
       "      <td>0.419131</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>2.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.00000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>9740.750000</td>\n",
       "      <td>24.000000</td>\n",
       "      <td>13.000000</td>\n",
       "      <td>1800.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>98.000000</td>\n",
       "      <td>98.00000</td>\n",
       "      <td>998.000000</td>\n",
       "      <td>1.000000e+09</td>\n",
       "      <td>998.000000</td>\n",
       "      <td>998.000000</td>\n",
       "      <td>9998.000000</td>\n",
       "      <td>9998.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>19812.000000</td>\n",
       "      <td>60.000000</td>\n",
       "      <td>55.000000</td>\n",
       "      <td>2538.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>98.000000</td>\n",
       "      <td>98.00000</td>\n",
       "      <td>998.000000</td>\n",
       "      <td>1.000000e+09</td>\n",
       "      <td>998.000000</td>\n",
       "      <td>998.000000</td>\n",
       "      <td>9998.000000</td>\n",
       "      <td>9998.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>29820.750000</td>\n",
       "      <td>132.000000</td>\n",
       "      <td>120.000000</td>\n",
       "      <td>3615.500000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>98.000000</td>\n",
       "      <td>98.00000</td>\n",
       "      <td>998.000000</td>\n",
       "      <td>1.000000e+09</td>\n",
       "      <td>998.000000</td>\n",
       "      <td>998.000000</td>\n",
       "      <td>9998.000000</td>\n",
       "      <td>9998.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>39786.000000</td>\n",
       "      <td>999.000000</td>\n",
       "      <td>999.000000</td>\n",
       "      <td>700000.000000</td>\n",
       "      <td>52.000000</td>\n",
       "      <td>66.000000</td>\n",
       "      <td>52.000000</td>\n",
       "      <td>67.000000</td>\n",
       "      <td>21.000000</td>\n",
       "      <td>28.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>99.000000</td>\n",
       "      <td>99.000000</td>\n",
       "      <td>99.00000</td>\n",
       "      <td>999.000000</td>\n",
       "      <td>1.000000e+09</td>\n",
       "      <td>999.000000</td>\n",
       "      <td>999.000000</td>\n",
       "      <td>9999.000000</td>\n",
       "      <td>9999.000000</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>8 rows Ã— 1883 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                 ID      VAR_0002      VAR_0003       VAR_0004      VAR_0006  \\\n",
       "count  20000.000000  20000.000000  20000.000000   20000.000000  19994.000000   \n",
       "mean   19816.086900    104.726850     88.940900    3632.640000      0.676003   \n",
       "std    11508.278148    141.417611    126.391923   10054.854967      1.548191   \n",
       "min        2.000000      0.000000      0.000000       0.000000      0.000000   \n",
       "25%     9740.750000     24.000000     13.000000    1800.000000      0.000000   \n",
       "50%    19812.000000     60.000000     55.000000    2538.000000      0.000000   \n",
       "75%    29820.750000    132.000000    120.000000    3615.500000      1.000000   \n",
       "max    39786.000000    999.000000    999.000000  700000.000000     52.000000   \n",
       "\n",
       "           VAR_0007      VAR_0013      VAR_0014      VAR_0015      VAR_0016  \\\n",
       "count  19994.000000  19994.000000  19994.000000  19994.000000  19994.000000   \n",
       "mean       0.503651      0.676003      0.486546      0.464689      1.439382   \n",
       "std        1.244530      1.548191      1.195092      0.972425      1.090811   \n",
       "min        0.000000      0.000000      0.000000      0.000000      0.000000   \n",
       "25%        0.000000      0.000000      0.000000      0.000000      1.000000   \n",
       "50%        0.000000      0.000000      0.000000      0.000000      1.000000   \n",
       "75%        1.000000      1.000000      1.000000      1.000000      1.000000   \n",
       "max       66.000000     52.000000     67.000000     21.000000     28.000000   \n",
       "\n",
       "           ...           VAR_1925      VAR_1926     VAR_1927      VAR_1928  \\\n",
       "count      ...       20000.000000  20000.000000  20000.00000  20000.000000   \n",
       "mean       ...           0.510700     86.700850     89.82830    914.417000   \n",
       "std        ...           6.057906     31.303839     26.93018    276.367084   \n",
       "min        ...           0.000000      0.000000      0.00000      0.000000   \n",
       "25%        ...           0.000000     98.000000     98.00000    998.000000   \n",
       "50%        ...           0.000000     98.000000     98.00000    998.000000   \n",
       "75%        ...           0.000000     98.000000     98.00000    998.000000   \n",
       "max        ...          99.000000     99.000000     99.00000    999.000000   \n",
       "\n",
       "           VAR_1929      VAR_1930      VAR_1931      VAR_1932      VAR_1933  \\\n",
       "count  2.000000e+04  20000.000000  20000.000000  20000.000000  20000.000000   \n",
       "mean   9.903500e+08    922.918600    936.496650   9944.365000   8853.884950   \n",
       "std    9.776170e+07    212.687408    210.356248    728.373585   3170.914064   \n",
       "min    0.000000e+00      1.000000      0.000000      0.000000      0.000000   \n",
       "25%    1.000000e+09    998.000000    998.000000   9998.000000   9998.000000   \n",
       "50%    1.000000e+09    998.000000    998.000000   9998.000000   9998.000000   \n",
       "75%    1.000000e+09    998.000000    998.000000   9998.000000   9998.000000   \n",
       "max    1.000000e+09    999.000000    999.000000   9999.000000   9999.000000   \n",
       "\n",
       "             target  \n",
       "count  20000.000000  \n",
       "mean       0.227350  \n",
       "std        0.419131  \n",
       "min        0.000000  \n",
       "25%        0.000000  \n",
       "50%        0.000000  \n",
       "75%        0.000000  \n",
       "max        1.000000  \n",
       "\n",
       "[8 rows x 1883 columns]"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train = pd.read_csv(url,nrows = 20000)\n",
    "nrows = len(train)\n",
    "train.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Here is the non numeric column feature:\n",
      "VAR_0001                                          [[H, R, Q]]\n",
      "VAR_0005                                       [[C, B, N, S]]\n",
      "VAR_0008                                       [[False, nan]]\n",
      "VAR_0009                                       [[False, nan]]\n",
      "VAR_0010                                       [[False, nan]]\n",
      "VAR_0011                                       [[False, nan]]\n",
      "VAR_0012                                       [[False, nan]]\n",
      "VAR_0043                                       [[False, nan]]\n",
      "VAR_0044                                          [[[], nan]]\n",
      "VAR_0073    [[nan, 04SEP12:00:00:00, 26JAN12:00:00:00, 18S...\n",
      "VAR_0075    [[08NOV11:00:00:00, 10NOV11:00:00:00, 13DEC11:...\n",
      "VAR_0156    [[nan, 14JUL11:00:00:00, 21NOV11:00:00:00, 13A...\n",
      "VAR_0157    [[nan, 05JUL12:00:00:00, 05JUN11:00:00:00, 26M...\n",
      "VAR_0158    [[nan, 31JAN12:00:00:00, 01MAR12:00:00:00, 02J...\n",
      "VAR_0159    [[nan, 14JUL11:00:00:00, 21NOV11:00:00:00, 13A...\n",
      "VAR_0166    [[nan, 12MAR12:00:00:00, 25FEB12:00:00:00, 22D...\n",
      "VAR_0167    [[nan, 09JUN12:00:00:00, 21MAY12:00:00:00, 07A...\n",
      "VAR_0168    [[nan, 22MAR12:00:00:00, 26JAN12:00:00:00, 22A...\n",
      "VAR_0169    [[nan, 12MAR12:00:00:00, 25FEB12:00:00:00, 13J...\n",
      "VAR_0176    [[nan, 12MAR12:00:00:00, 25FEB12:00:00:00, 14J...\n",
      "VAR_0177    [[nan, 09JUN12:00:00:00, 05JUL12:00:00:00, 21M...\n",
      "VAR_0178    [[nan, 22MAR12:00:00:00, 26JAN12:00:00:00, 22A...\n",
      "VAR_0179    [[nan, 12MAR12:00:00:00, 25FEB12:00:00:00, 14J...\n",
      "VAR_0196                                       [[False, nan]]\n",
      "VAR_0200    [[FT LAUDERDALE, SANTEE, REEDSVILLE, LIBERTY, ...\n",
      "VAR_0202                                [[BatchInquiry, nan]]\n",
      "VAR_0204    [[29JAN14:21:16:00, 01FEB14:00:11:00, 30JAN14:...\n",
      "VAR_0214                         [[nan, HRE-Home Phone-0621]]\n",
      "VAR_0216                                          [[DS, nan]]\n",
      "VAR_0217    [[08NOV11:02:00:00, 02OCT12:02:00:00, 13DEC11:...\n",
      "VAR_0222                                          [[C6, nan]]\n",
      "VAR_0226                                 [[False, True, nan]]\n",
      "VAR_0229                                       [[False, nan]]\n",
      "VAR_0230                                 [[False, True, nan]]\n",
      "VAR_0232                                 [[True, False, nan]]\n",
      "VAR_0236                                 [[True, False, nan]]\n",
      "VAR_0237    [[FL, CA, WV, TX, IL, OR, GA, PA, TN, WA, VA, ...\n",
      "VAR_0239                                       [[False, nan]]\n",
      "VAR_0274    [[FL, MI, WV, TX, IL, ME, CA, SC, PA, TN, GA, ...\n",
      "VAR_0283                        [[S, H, -1, P, nan, R, F, U]]\n",
      "VAR_0305                        [[S, P, H, -1, nan, R, U, M]]\n",
      "VAR_0325                  [[-1, H, R, S, P, nan, F, M, G, U]]\n",
      "VAR_0342    [[CF, EC, UU, -1, FE, DC, FF, EE, BC, EF, FD, ...\n",
      "VAR_0352                                 [[O, R, U, -1, nan]]\n",
      "VAR_0353                                 [[U, R, O, -1, nan]]\n",
      "VAR_0354                                 [[O, R, -1, U, nan]]\n",
      "VAR_0404    [[CHIEF EXECUTIVE OFFICER, -1, CONTA, CONTACT,...\n",
      "VAR_0466                                       [[-1, I, nan]]\n",
      "VAR_0467     [[-1, Discharged, Dismissed, nan, Discharge NA]]\n",
      "VAR_0493    [[COMMUNITY ASSOCIATION MANAGER, -1, LICENSED ...\n",
      "VAR_1934                   [[IAPS, RCC, BRANCH, MOBILE, CSC]]\n",
      "dtype: object\n"
     ]
    }
   ],
   "source": [
    "print('Here is the non numeric column feature:')\n",
    "\n",
    "types = train.dtypes\n",
    "str_features = types[train.dtypes == 'object'].index.values\n",
    "print(rstr(train[str_features]))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "mixCol = [8,9,10,11,12,18,19,20,21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 38, 39, 40, 41, 42, 43, 44, 45, \n",
    "          73, 74, 98, 99, 100, 106, 107, 108, 156, 157, 158, 159, 166, 167, 168, 169, 176, 177, 178, 179, 180, \n",
    "          181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 202, 205, 206, 207, \n",
    "          208, 209, 210, 211, 212, 213, 214, 215, 216, 218, 219, 220, 221, 222, 223, 224, 225, 240, 371, 372, 373, 374,\n",
    "          375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, \n",
    "          396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, \n",
    "          437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457,\n",
    "          458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478,\n",
    "          479, 480, 481, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509,\n",
    "          510, 511, 512, 513, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 840]\n",
    "\n",
    "placeCol = [200, 237, 274, 342]\n",
    "timeCol = [73, 75, 156, 157, 158, 159, 166, 167, 168, 169, 176, 177, 178, 179, 204, 217]\n",
    "\n",
    "selectColumns = []\n",
    "rmCol = mixCol+placeCol+timeCol\n",
    "for i in range(1,1935):\n",
    "    if i not in rmCol:\n",
    "        selectColumns.append(i)\n",
    "\n",
    "cols = [str(n).zfill(4) for n in selectColumns]\n",
    "strColName = ['VAR_' + strNum for strNum in cols] \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/conda/envs/python2/lib/python2.7/site-packages/pandas/io/parsers.py:1170: DtypeWarning: Columns (225,228,229,231,235,238) have mixed types. Specify dtype option on import or set low_memory=False.\n",
      "  data = self._reader.read(nrows)\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>VAR_0002</th>\n",
       "      <th>VAR_0003</th>\n",
       "      <th>VAR_0004</th>\n",
       "      <th>VAR_0006</th>\n",
       "      <th>VAR_0007</th>\n",
       "      <th>VAR_0013</th>\n",
       "      <th>VAR_0014</th>\n",
       "      <th>VAR_0015</th>\n",
       "      <th>VAR_0016</th>\n",
       "      <th>VAR_0017</th>\n",
       "      <th>...</th>\n",
       "      <th>VAR_1924</th>\n",
       "      <th>VAR_1925</th>\n",
       "      <th>VAR_1926</th>\n",
       "      <th>VAR_1927</th>\n",
       "      <th>VAR_1928</th>\n",
       "      <th>VAR_1929</th>\n",
       "      <th>VAR_1930</th>\n",
       "      <th>VAR_1931</th>\n",
       "      <th>VAR_1932</th>\n",
       "      <th>VAR_1933</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>20000.000000</td>\n",
       "      <td>20000.000000</td>\n",
       "      <td>20000.000000</td>\n",
       "      <td>19994.000000</td>\n",
       "      <td>19994.000000</td>\n",
       "      <td>19994.000000</td>\n",
       "      <td>19994.000000</td>\n",
       "      <td>19994.000000</td>\n",
       "      <td>19994.000000</td>\n",
       "      <td>19994.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>20000.000000</td>\n",
       "      <td>20000.000000</td>\n",
       "      <td>20000.000000</td>\n",
       "      <td>20000.00000</td>\n",
       "      <td>20000.000000</td>\n",
       "      <td>2.000000e+04</td>\n",
       "      <td>20000.000000</td>\n",
       "      <td>20000.000000</td>\n",
       "      <td>20000.000000</td>\n",
       "      <td>20000.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>104.726850</td>\n",
       "      <td>88.940900</td>\n",
       "      <td>3632.640000</td>\n",
       "      <td>0.676003</td>\n",
       "      <td>0.503651</td>\n",
       "      <td>0.676003</td>\n",
       "      <td>0.486546</td>\n",
       "      <td>0.464689</td>\n",
       "      <td>1.439382</td>\n",
       "      <td>0.483545</td>\n",
       "      <td>...</td>\n",
       "      <td>7945.620950</td>\n",
       "      <td>0.510700</td>\n",
       "      <td>86.700850</td>\n",
       "      <td>89.82830</td>\n",
       "      <td>914.417000</td>\n",
       "      <td>9.903500e+08</td>\n",
       "      <td>922.918600</td>\n",
       "      <td>936.496650</td>\n",
       "      <td>9944.365000</td>\n",
       "      <td>8853.884950</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>141.417611</td>\n",
       "      <td>126.391923</td>\n",
       "      <td>10054.854967</td>\n",
       "      <td>1.548191</td>\n",
       "      <td>1.244530</td>\n",
       "      <td>1.548191</td>\n",
       "      <td>1.195092</td>\n",
       "      <td>0.972425</td>\n",
       "      <td>1.090811</td>\n",
       "      <td>1.135168</td>\n",
       "      <td>...</td>\n",
       "      <td>4003.980058</td>\n",
       "      <td>6.057906</td>\n",
       "      <td>31.303839</td>\n",
       "      <td>26.93018</td>\n",
       "      <td>276.367084</td>\n",
       "      <td>9.776170e+07</td>\n",
       "      <td>212.687408</td>\n",
       "      <td>210.356248</td>\n",
       "      <td>728.373585</td>\n",
       "      <td>3170.914064</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.00000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>24.000000</td>\n",
       "      <td>13.000000</td>\n",
       "      <td>1800.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>9998.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>98.000000</td>\n",
       "      <td>98.00000</td>\n",
       "      <td>998.000000</td>\n",
       "      <td>1.000000e+09</td>\n",
       "      <td>998.000000</td>\n",
       "      <td>998.000000</td>\n",
       "      <td>9998.000000</td>\n",
       "      <td>9998.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>60.000000</td>\n",
       "      <td>55.000000</td>\n",
       "      <td>2538.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>9998.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>98.000000</td>\n",
       "      <td>98.00000</td>\n",
       "      <td>998.000000</td>\n",
       "      <td>1.000000e+09</td>\n",
       "      <td>998.000000</td>\n",
       "      <td>998.000000</td>\n",
       "      <td>9998.000000</td>\n",
       "      <td>9998.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>132.000000</td>\n",
       "      <td>120.000000</td>\n",
       "      <td>3615.500000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>9998.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>98.000000</td>\n",
       "      <td>98.00000</td>\n",
       "      <td>998.000000</td>\n",
       "      <td>1.000000e+09</td>\n",
       "      <td>998.000000</td>\n",
       "      <td>998.000000</td>\n",
       "      <td>9998.000000</td>\n",
       "      <td>9998.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>999.000000</td>\n",
       "      <td>999.000000</td>\n",
       "      <td>700000.000000</td>\n",
       "      <td>52.000000</td>\n",
       "      <td>66.000000</td>\n",
       "      <td>52.000000</td>\n",
       "      <td>67.000000</td>\n",
       "      <td>21.000000</td>\n",
       "      <td>28.000000</td>\n",
       "      <td>25.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>9999.000000</td>\n",
       "      <td>99.000000</td>\n",
       "      <td>99.000000</td>\n",
       "      <td>99.00000</td>\n",
       "      <td>999.000000</td>\n",
       "      <td>1.000000e+09</td>\n",
       "      <td>999.000000</td>\n",
       "      <td>999.000000</td>\n",
       "      <td>9999.000000</td>\n",
       "      <td>9999.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>8 rows Ã— 1697 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "           VAR_0002      VAR_0003       VAR_0004      VAR_0006      VAR_0007  \\\n",
       "count  20000.000000  20000.000000   20000.000000  19994.000000  19994.000000   \n",
       "mean     104.726850     88.940900    3632.640000      0.676003      0.503651   \n",
       "std      141.417611    126.391923   10054.854967      1.548191      1.244530   \n",
       "min        0.000000      0.000000       0.000000      0.000000      0.000000   \n",
       "25%       24.000000     13.000000    1800.000000      0.000000      0.000000   \n",
       "50%       60.000000     55.000000    2538.000000      0.000000      0.000000   \n",
       "75%      132.000000    120.000000    3615.500000      1.000000      1.000000   \n",
       "max      999.000000    999.000000  700000.000000     52.000000     66.000000   \n",
       "\n",
       "           VAR_0013      VAR_0014      VAR_0015      VAR_0016      VAR_0017  \\\n",
       "count  19994.000000  19994.000000  19994.000000  19994.000000  19994.000000   \n",
       "mean       0.676003      0.486546      0.464689      1.439382      0.483545   \n",
       "std        1.548191      1.195092      0.972425      1.090811      1.135168   \n",
       "min        0.000000      0.000000      0.000000      0.000000      0.000000   \n",
       "25%        0.000000      0.000000      0.000000      1.000000      0.000000   \n",
       "50%        0.000000      0.000000      0.000000      1.000000      0.000000   \n",
       "75%        1.000000      1.000000      1.000000      1.000000      0.000000   \n",
       "max       52.000000     67.000000     21.000000     28.000000     25.000000   \n",
       "\n",
       "           ...           VAR_1924      VAR_1925      VAR_1926     VAR_1927  \\\n",
       "count      ...       20000.000000  20000.000000  20000.000000  20000.00000   \n",
       "mean       ...        7945.620950      0.510700     86.700850     89.82830   \n",
       "std        ...        4003.980058      6.057906     31.303839     26.93018   \n",
       "min        ...           0.000000      0.000000      0.000000      0.00000   \n",
       "25%        ...        9998.000000      0.000000     98.000000     98.00000   \n",
       "50%        ...        9998.000000      0.000000     98.000000     98.00000   \n",
       "75%        ...        9998.000000      0.000000     98.000000     98.00000   \n",
       "max        ...        9999.000000     99.000000     99.000000     99.00000   \n",
       "\n",
       "           VAR_1928      VAR_1929      VAR_1930      VAR_1931      VAR_1932  \\\n",
       "count  20000.000000  2.000000e+04  20000.000000  20000.000000  20000.000000   \n",
       "mean     914.417000  9.903500e+08    922.918600    936.496650   9944.365000   \n",
       "std      276.367084  9.776170e+07    212.687408    210.356248    728.373585   \n",
       "min        0.000000  0.000000e+00      1.000000      0.000000      0.000000   \n",
       "25%      998.000000  1.000000e+09    998.000000    998.000000   9998.000000   \n",
       "50%      998.000000  1.000000e+09    998.000000    998.000000   9998.000000   \n",
       "75%      998.000000  1.000000e+09    998.000000    998.000000   9998.000000   \n",
       "max      999.000000  1.000000e+09    999.000000    999.000000   9999.000000   \n",
       "\n",
       "           VAR_1933  \n",
       "count  20000.000000  \n",
       "mean    8853.884950  \n",
       "std     3170.914064  \n",
       "min        0.000000  \n",
       "25%     9998.000000  \n",
       "50%     9998.000000  \n",
       "75%     9998.000000  \n",
       "max     9999.000000  \n",
       "\n",
       "[8 rows x 1697 columns]"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "url = 'https://s3.eu-central-1.amazonaws.com/smutomcat/new+folder/train.csv'\n",
    "trainData = pd.read_csv(url,usecols=strColName,nrows=20000)\n",
    "label = pd.read_csv(url, usecols=['target'],nrows=20000)\n",
    "trainData.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "numericFeatures = trainData._get_numeric_data()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "removeNA = numericFeatures.fillna(0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "from sklearn.feature_selection import VarianceThreshold\n",
    "sel = VarianceThreshold(threshold=(.8 * (1 - .8)))\n",
    "features = sel.fit_transform(removeNA)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "y = np.array(label).ravel()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "from sklearn.cross_validation import train_test_split\n",
    "X_train, X_test, y_train, y_test = train_test_split(features, y, test_size=0.33, random_state=123)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "y_train = np.array(y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "from sklearn.ensemble import RandomForestClassifier\n",
    "rf= RandomForestClassifier(n_estimators=100, n_jobs=4, class_weight= \"subsample\")\n",
    "rforest = rf.fit(X_train, y_train)\n",
    "predict_output = rforest.predict(X_test)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "from sklearn.ensemble import AdaBoostClassifier\n",
    "adarf = AdaBoostClassifier(base_estimator=None, n_estimators=50, learning_rate=1.0, algorithm='SAMME.R', random_state=None)\n",
    "ada = adarf.fit(X_train, y_train)\n",
    "predict_outputada = ada.predict(X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "from sklearn.ensemble import GradientBoostingClassifier\n",
    "GBM = GradientBoostingClassifier(loss='deviance', learning_rate=0.1, n_estimators=100, subsample=1.0, min_samples_split=2)\n",
    "gbm = GBM.fit(X_train, y_train)\n",
    "predict_outputGBM = gbm.predict(X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "('roc_random forest', 0.54054186228482004)\n"
     ]
    }
   ],
   "source": [
    "from sklearn.metrics import roc_auc_score\n",
    "print ('roc_random forest', roc_auc_score(y_test, predict_output))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "('roc_adaboost', 0.6011408955525267)\n"
     ]
    }
   ],
   "source": [
    "print ('roc_adaboost', roc_auc_score(y_test, predict_outputada))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "('roc_gbm', 0.59848427482457467)\n"
     ]
    }
   ],
   "source": [
    "print ('roc_gbm', roc_auc_score(y_test, predict_outputGBM))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th>Predicted</th>\n",
       "      <th>0</th>\n",
       "      <th>1</th>\n",
       "      <th>All</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>True</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>4994</td>\n",
       "      <td>118</td>\n",
       "      <td>5112</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1333</td>\n",
       "      <td>155</td>\n",
       "      <td>1488</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>All</th>\n",
       "      <td>6327</td>\n",
       "      <td>273</td>\n",
       "      <td>6600</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "Predicted     0    1   All\n",
       "True                      \n",
       "0          4994  118  5112\n",
       "1          1333  155  1488\n",
       "All        6327  273  6600"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pd.crosstab(y_test, predict_output,rownames=['True'], colnames=['Predicted'], margins=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th>Predicted</th>\n",
       "      <th>0</th>\n",
       "      <th>1</th>\n",
       "      <th>All</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>True</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>4765</td>\n",
       "      <td>347</td>\n",
       "      <td>5112</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1086</td>\n",
       "      <td>402</td>\n",
       "      <td>1488</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>All</th>\n",
       "      <td>5851</td>\n",
       "      <td>749</td>\n",
       "      <td>6600</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "Predicted     0    1   All\n",
       "True                      \n",
       "0          4765  347  5112\n",
       "1          1086  402  1488\n",
       "All        5851  749  6600"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pd.crosstab(y_test, predict_outputada,rownames=['True'], colnames=['Predicted'], margins=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th>Predicted</th>\n",
       "      <th>0</th>\n",
       "      <th>1</th>\n",
       "      <th>All</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>True</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>4889</td>\n",
       "      <td>223</td>\n",
       "      <td>5112</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1130</td>\n",
       "      <td>358</td>\n",
       "      <td>1488</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>All</th>\n",
       "      <td>6019</td>\n",
       "      <td>581</td>\n",
       "      <td>6600</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "Predicted     0    1   All\n",
       "True                      \n",
       "0          4889  223  5112\n",
       "1          1130  358  1488\n",
       "All        6019  581  6600"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pd.crosstab(y_test, predict_outputGBM,rownames=['True'], colnames=['Predicted'], margins=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "from sklearn.metrics import accuracy_score\n",
    "rfscore=accuracy_score(y_test,predict_output)\n",
    "adascore=accuracy_score(y_test,predict_outputada)\n",
    "gbmscore=accuracy_score(y_test,predict_outputGBM)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.78015151515151515"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "rfscore"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.78287878787878784"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "adascore"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.79500000000000004"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "gbmscore"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 2",
   "language": "python",
   "name": "python2"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 2
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython2",
   "version": "2.7.10"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 0
}
